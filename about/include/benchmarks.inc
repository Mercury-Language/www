<h2>About Mercury<span class="submenutitle">/ benchmarks </span></h2>

<h3>Running the benchmarks</h3>
<p>
We have used a set of ten small logic programming benchmarks to compare
the performance of Mercury to the performance of other logic programming
systems.  Since the syntax of Mercury is quite close to the syntax of
Prolog, we have only one version of each benchmark, which is put through
the C preprocessor, with a set of definitions depending on the system
being tested.  This is how we enable the declarations appropriate for
Mercury, Aquarius Prolog, SICStus Prolog or NU-Prolog.
</p>
<p>
The benchmarks were run on a Sun SPARCserver 1000 with four 50 MHz TI
SuperSPARC processors and 256 megabytes of memory running SunOS 5.3
(Solaris 2.3).  Each processor is rated at 60.3 SPECint92, and has a
4-way associative 16 Kb I-cache and a 5-way associative 20 Kb D-cache,
backed by 1 Mb of unified secondary cache.
</p>
<p>
The tested systems are SWI-Prolog 1.9.0, NU-Prolog 1.6.4, wamcc 2.21,
Quintus Prolog 3.2, SICStus Prolog 2.1, Aquarius Prolog 1.0
and Mercury 0.5-beta.
</p>

<div style="float: left; max-width: 420px; margin-right: 50px">
<h3>Benchmarks used</h3>
<p>
This list contains links to the sources of the benchmarks:
</p>

<ul class="nonindentlist">
<li>
<a href = "bench/cqueens.html">cqueens</a>
is the queens benchmark after it has been put through
the source-to-source transformation of Seki and Furukawa
from the Proceedings of the Fourth IEEE Symposium on Logic Programming.
(Note: cqueens uses the source code for queens,
but defines a macro that selects different versions of some predicates).
</li>
<li>
<a href = "bench/crypt.html">crypt</a>
solves a cryptoarithmetic puzzle.
</li>
<li>
<a href = "bench/deriv.html">deriv</a>
symbolically differentiates four functions of a single variable.
</li>
<li>
<a href = "bench/nrev.html">nrev</a>
reverses a list of 30 elements using the naive algorithm.
</li>
<li>
<a href = "bench/poly.html">poly</a>
symbolically raises 1+x+y+z to the tenth power.
</li>
<li>
<a href = "bench/primes.html">prime</a>
finds all primes up to 100.
</li>
<li>
<a href = "bench/qsort.html">qsort</a>
quicksorts a list of 50 integers using difference lists.
</li>
<li>
<a href = "bench/queens.html">queens</a>
finds all safe placements of 9 queens on a 9x9 chessboard.
</li>
<li>
<a href = "bench/query.html">query</a>
finds countries with approximately equal population density.
</li>
<li>
<a href = "bench/tak.html">tak</a>
is an artificial benchmark, originally written in Lisp;
it is heavily recursive and does lots of simple integer arithmetic.
</li>
</ul>
<p>
The benchmarks use the following test harness:
</p>
<ul class="nonindentlist">
<li> <a href = "bench/harness.html">harness</a></li>
</ul>
</div>

<div style="float: left; max-width: 420px;">
<h3>Benchmarking results</h3>
<p>
The benchmark results are available here in three forms:
</p>

<ul class="nonindentlist">
<li>
as performance
<a href = "bench/ratios.html">
ratios</a>
normalised to the speed of SWI-Prolog.
</li>
<li>
as speed
<a href = "bench/percentages.html">
percentages</a>
normalised to the speed of the fastest system variant on each benchmark.
</li>
<li>
as 
<a href = "bench/times.html">
raw times</a>
listed as milliseconds per iteration of the benchmark.
</li>
</ul>

<h3>Generated code</h3>
<p>
This list contains links to the C files
generated by the Mercury compiler for the benchmarks:
</p>

<table style="width: 300px;">
<tr>
<td>
<ul class="nonindentlist">
<li>
<a href = "bench/cqueens_c.html">cqueens</a>
</li>
<li>
<a href = "bench/crypt_c.html">crypt</a>
</li>
<li>
<a href = "bench/deriv_c.html">deriv</a>
</li>
<li>
<a href = "bench/nrev_c.html">nrev</a>
</li>
<li>
<a href = "bench/poly_c.html">poly</a>
</li>
</ul>
</td>
<td>
<ul class="nonindentlist">
<li>
<a href = "bench/primes_c.html">prime</a>
</li>
<li>
<a href = "bench/qsort_c.html">qsort</a>
</li>
<li>
<a href = "bench/queens_c.html">queens</a>
</li>
<li>
<a href = "bench/query_c.html">query</a>
</li>
<li>
<a href = "bench/tak_c.html">tak</a>
</li>
</ul>
</td>
</tr>
</table>
</div>

<div style="clear:both"></div>

